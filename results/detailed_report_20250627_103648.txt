DOWNSAMPLER PERFORMANCE COMPARISON REPORT
======================================================================
Generated: 2025-06-27T10:36:22.392881
Acquisition Directory: /Users/julioamaragall/Documents/10x_mouse_brain_2025-04-23_00-53-11.236590
======================================================================

OVERALL SUMMARY
--------------------------------------------------
Total tests run: 6
Successful comparisons: 6
Average speedup: 28.09x
Average improvement: 92.9%

Best speedup: 50.07x (Tile size: 75, Cache: True)
Worst speedup: 7.17x (Tile size: 100, Cache: False)

DETAILED TEST RESULTS
======================================================================

Test 1: Tile size=50, Cache=True
--------------------------------------------------
Original implementation: 4.75s
Optimized implementation: 0.10s
Speedup: 45.58x
Improvement: 97.8%

Stage breakdown:
  build_grid          :  0.000s →  0.000s (1.06x)
  create_mosaic       :  0.275s →  0.100s (2.76x)
  initialization      :  0.000s →  0.000s (0.88x)
  load_coordinates    :  0.000s →  0.000s (1.92x)
  other               :  0.000s →  0.002s (0.00x)
  scan_files          :  0.003s →  0.002s (1.37x)
  tile_processing     :  4.469s →  0.000s (infx)

Test 2: Tile size=50, Cache=False
--------------------------------------------------
Original implementation: 3.78s
Optimized implementation: 0.42s
Speedup: 9.11x
Improvement: 89.0%

Stage breakdown:
  build_grid          :  0.000s →  0.000s (1.00x)
  create_mosaic       :  0.215s →  0.152s (1.42x)
  initialization      :  0.000s →  0.000s (0.74x)
  load_coordinates    :  0.000s →  0.000s (0.83x)
  other               :  0.000s →  0.262s (0.00x)
  scan_files          :  0.001s →  0.002s (0.36x)
  tile_processing     :  3.568s →  0.000s (infx)

Test 3: Tile size=75, Cache=True
--------------------------------------------------
Original implementation: 3.85s
Optimized implementation: 0.08s
Speedup: 50.07x
Improvement: 98.0%

Stage breakdown:
  build_grid          :  0.000s →  0.000s (1.11x)
  create_mosaic       :  0.220s →  0.072s (3.04x)
  initialization      :  0.000s →  0.000s (1.07x)
  load_coordinates    :  0.000s →  0.000s (0.95x)
  other               :  0.000s →  0.002s (0.00x)
  scan_files          :  0.001s →  0.002s (0.51x)
  tile_processing     :  3.634s →  0.000s (infx)

Test 4: Tile size=75, Cache=False
--------------------------------------------------
Original implementation: 3.84s
Optimized implementation: 0.43s
Speedup: 9.01x
Improvement: 88.9%

Stage breakdown:
  build_grid          :  0.000s →  0.000s (0.97x)
  create_mosaic       :  0.218s →  0.159s (1.38x)
  initialization      :  0.000s →  0.000s (0.93x)
  load_coordinates    :  0.000s →  0.000s (0.83x)
  other               :  0.000s →  0.266s (0.00x)
  scan_files          :  0.001s →  0.002s (0.36x)
  tile_processing     :  3.623s →  0.000s (infx)

Test 5: Tile size=100, Cache=True
--------------------------------------------------
Original implementation: 3.90s
Optimized implementation: 0.08s
Speedup: 47.62x
Improvement: 97.9%

Stage breakdown:
  build_grid          :  0.000s →  0.000s (1.60x)
  create_mosaic       :  0.224s →  0.077s (2.91x)
  initialization      :  0.000s →  0.000s (1.02x)
  load_coordinates    :  0.000s →  0.000s (1.14x)
  other               :  0.000s →  0.003s (0.00x)
  scan_files          :  0.001s →  0.002s (0.42x)
  tile_processing     :  3.673s →  0.000s (infx)

Test 6: Tile size=100, Cache=False
--------------------------------------------------
Original implementation: 3.89s
Optimized implementation: 0.54s
Speedup: 7.17x
Improvement: 86.1%

Stage breakdown:
  build_grid          :  0.000s →  0.000s (1.10x)
  create_mosaic       :  0.220s →  0.246s (0.89x)
  initialization      :  0.000s →  0.000s (0.96x)
  load_coordinates    :  0.000s →  0.000s (0.85x)
  other               :  0.000s →  0.295s (0.00x)
  scan_files          :  0.001s →  0.002s (0.35x)
  tile_processing     :  3.673s →  0.000s (infx)

OPTIMIZATION TECHNIQUES APPLIED
======================================================================
1. Parallel Processing:
   - Parallel file scanning with ThreadPoolExecutor
   - Parallel tile processing in batches
   - Concurrent channel intensity pre-scanning

2. I/O Optimizations:
   - Memory-mapped file access for large images
   - Batch CSV reading
   - Reduced file system calls

3. Algorithm Improvements:
   - Fast area averaging for large downsampling factors
   - Optimized 8-bit conversion with vectorized operations
   - Smart caching of channel intensities

4. Memory Efficiency:
   - Process tiles in batches to manage memory
   - Use memory mapping instead of loading full images
   - Efficient numpy operations

