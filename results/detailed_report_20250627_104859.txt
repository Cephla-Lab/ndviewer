DOWNSAMPLER PERFORMANCE COMPARISON REPORT
======================================================================
Generated: 2025-06-27T10:45:14.314694
Acquisition Directory: /Users/julioamaragall/Documents/A1-A3_2025-06-18_18-13-37.157381
======================================================================

OVERALL SUMMARY
--------------------------------------------------
Total tests run: 6
Successful comparisons: 6
Average speedup: 2.33x
Average improvement: 55.0%

Best speedup: 2.88x (Tile size: 100, Cache: True)
Worst speedup: 1.78x (Tile size: 100, Cache: False)

DETAILED TEST RESULTS
======================================================================

Test 1: Tile size=50, Cache=True
--------------------------------------------------
Original implementation: 25.95s
Optimized implementation: 9.45s
Speedup: 2.75x
Improvement: 63.6%

Stage breakdown:
  build_grid          :  0.000s →  0.000s (0.98x)
  create_mosaic       :  0.479s →  9.423s (0.05x)
  initialization      :  0.000s →  0.000s (0.63x)
  load_coordinates    :  0.001s →  0.002s (0.74x)
  other               :  0.000s →  0.008s (0.00x)
  scan_files          :  0.018s →  0.016s (1.14x)
  tile_processing     : 25.450s →  0.000s (infx)

Test 2: Tile size=50, Cache=False
--------------------------------------------------
Original implementation: 25.88s
Optimized implementation: 14.03s
Speedup: 1.84x
Improvement: 45.8%

Stage breakdown:
  build_grid          :  0.000s →  0.000s (0.99x)
  create_mosaic       :  0.486s → 11.571s (0.04x)
  initialization      :  0.000s →  0.000s (0.82x)
  load_coordinates    :  0.001s →  0.001s (0.76x)
  other               :  0.000s →  2.429s (0.00x)
  scan_files          :  0.006s →  0.033s (0.19x)
  tile_processing     : 25.388s →  0.000s (infx)

Test 3: Tile size=75, Cache=True
--------------------------------------------------
Original implementation: 25.89s
Optimized implementation: 9.08s
Speedup: 2.85x
Improvement: 64.9%

Stage breakdown:
  build_grid          :  0.000s →  0.000s (0.99x)
  create_mosaic       :  0.499s →  9.056s (0.06x)
  initialization      :  0.000s →  0.000s (1.44x)
  load_coordinates    :  0.001s →  0.001s (0.92x)
  other               :  0.000s →  0.010s (0.00x)
  scan_files          :  0.006s →  0.016s (0.39x)
  tile_processing     : 25.380s →  0.000s (infx)

Test 4: Tile size=75, Cache=False
--------------------------------------------------
Original implementation: 25.81s
Optimized implementation: 13.75s
Speedup: 1.88x
Improvement: 46.7%

Stage breakdown:
  build_grid          :  0.000s →  0.000s (1.17x)
  create_mosaic       :  0.524s → 11.470s (0.05x)
  initialization      :  0.000s →  0.000s (1.85x)
  load_coordinates    :  0.001s →  0.001s (1.13x)
  other               :  0.000s →  2.264s (0.00x)
  scan_files          :  0.014s →  0.016s (0.83x)
  tile_processing     : 25.268s →  0.000s (infx)

Test 5: Tile size=100, Cache=True
--------------------------------------------------
Original implementation: 25.75s
Optimized implementation: 8.93s
Speedup: 2.88x
Improvement: 65.3%

Stage breakdown:
  build_grid          :  0.000s →  0.000s (1.05x)
  create_mosaic       :  0.549s →  8.897s (0.06x)
  initialization      :  0.000s →  0.000s (1.11x)
  load_coordinates    :  0.001s →  0.001s (0.89x)
  other               :  0.000s →  0.008s (0.00x)
  scan_files          :  0.006s →  0.027s (0.23x)
  tile_processing     : 25.192s →  0.000s (infx)

Test 6: Tile size=100, Cache=False
--------------------------------------------------
Original implementation: 25.89s
Optimized implementation: 14.57s
Speedup: 1.78x
Improvement: 43.7%

Stage breakdown:
  build_grid          :  0.000s →  0.000s (0.98x)
  create_mosaic       :  0.553s → 12.285s (0.04x)
  initialization      :  0.000s →  0.000s (1.49x)
  load_coordinates    :  0.001s →  0.001s (1.01x)
  other               :  0.000s →  2.269s (0.00x)
  scan_files          :  0.006s →  0.016s (0.40x)
  tile_processing     : 25.329s →  0.000s (infx)

OPTIMIZATION TECHNIQUES APPLIED
======================================================================
1. Parallel Processing:
   - Parallel file scanning with ThreadPoolExecutor
   - Parallel tile processing in batches
   - Concurrent channel intensity pre-scanning

2. I/O Optimizations:
   - Memory-mapped file access for large images
   - Batch CSV reading
   - Reduced file system calls

3. Algorithm Improvements:
   - Fast area averaging for large downsampling factors
   - Optimized 8-bit conversion with vectorized operations
   - Smart caching of channel intensities

4. Memory Efficiency:
   - Process tiles in batches to manage memory
   - Use memory mapping instead of loading full images
   - Efficient numpy operations

